// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PointType {
  ADD
  SUBTRACT
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  password           String
  fname              String    @default("Unknownfname")
  lname              String    @default("Unknownlname")
  points             Int       @default(0)
  createdAt          DateTime  @default(now())
  updateAt           DateTime? @updatedAt
  refreshToken       String?   @db.Text
  resetPasswordToken String?   @db.Text

  role Role @default(USER)

  reviews           Review[]
  redemptions       Redemption[]
  pointTransactions PointTransaction[]
  ReviewLike        ReviewLike[]
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  main String?
  location  String
  aqi       Int      @default(0) // Air Quality Index (AQI) value
  rating    Int      @default(0)
  dislike   Int      @default(0) // 1-5 stars for air quality
  detail    String?
  createdAt DateTime @default(now())

  likes ReviewLike[]
}

model PointTransaction {
  id        Int       @id @default(autoincrement())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  points    Int
  type      PointType
  reason    String // "Review Submitted", "Reward Redeemed", etc.
  createdAt DateTime  @default(now())
}

model Reward {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  cost        Int // Cost in points
  createdAt   DateTime      @default(now())
  type        String
  imgUrl      String?
  redemptions Redemption[]
  values      RewardValue[]
}

model RewardValue {
  id         Int          @id @default(autoincrement())
  rewardId   Int
  reward     Reward       @relation(fields: [rewardId], references: [id])
  value      String       @unique
  isUsed     Boolean      @default(false)
  createdAt  DateTime     @default(now())
  redemtions Redemption[]
}

model Redemption {
  id            Int      @id @default(autoincrement())
  userId        String
  rewardId      Int
  rewardValueId Int
  createdAt     DateTime @default(now())

  reward      Reward      @relation(fields: [rewardId], references: [id])
  rewardValue RewardValue @relation(fields: [rewardValueId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}

model ReviewLike {
  id        Int      @id @default(autoincrement())
  userId    String
  reviewId  Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])

  @@unique([userId, reviewId])
}
